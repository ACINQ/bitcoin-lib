package fr.acinq.bitcoinscala

import fr.acinq.bitcoinscala.Crypto.{PrivateKey, PublicKey}
import fr.acinq.bitcoinscala.DeterministicWallet.{ExtendedPrivateKey, KeyPath}
import fr.acinq.bitcoinscala.Psbt._
import org.scalatest.FunSuite
import scodec.bits.{ByteVector, HexStringSyntax}

import scala.util.{Failure, Success}

class PsbtSpec extends FunSuite {

  val (prefix, masterPrivKey) = ExtendedPrivateKey.decode("tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF")
  assert(prefix === DeterministicWallet.tprv)

  test("invalid psbts") {
    case class TestCase(bin: ByteVector, expected: String)
    val testCases = Seq(
      /** OFFICIAL TEST VECTORS */
      // Network transaction, not PSBT format
      TestCase(
        hex"0200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf6000000006a473044022070b2245123e6bf474d60c5b50c043d4c691a5d2435f09a34a7662a9dc251790a022001329ca9dacf280bdf30740ec0390422422c81cb45839457aeb76fc12edd95b3012102657d118d3357b8e0f4c2cd46db7b39f6d9c38d9a70abcb9b2de5dc8dbfe4ce31feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300",
        "invalid magic bytes: psbt must start with 0x70736274"
      ),
      // PSBT missing outputs
      TestCase(
        hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000000",
        "len < 0"
      ),
      // PSBT where one input has a filled scriptSig in the unsigned tx
      TestCase(
        hex"70736274ff0100fd0a010200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be4000000006a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa88292feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac00000000000001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000",
        "psbt tx inputs must have empty scriptSigs and witness"
      ),
      // PSBT where inputs and outputs are provided but without an unsigned tx
      TestCase(
        hex"70736274ff000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000000",
        "psbt must contain a transaction"
      ),
      // PSBT with duplicate keys in an input
      TestCase(
        hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000001003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a010000000000000000",
        "psbt must not contain duplicate keys"
      ),
      // PSBT with invalid global transaction typed key
      TestCase(
        hex"70736274ff020001550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "psbt tx key must contain exactly 1 byte"
      ),
      // PSBT with invalid input witness utxo typed key
      TestCase(
        hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac000000000002010020955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "psbt witness utxo key must contain exactly 1 byte"
      ),
      // PSBT with invalid pubkey length for input partial signature typed key
      TestCase(
        hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87210203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd46304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "requirement failed"
      ),
      // PSBT with invalid redeemScript typed key
      TestCase(
        hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a01020400220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "psbt redeem script key must contain exactly 1 byte"
      ),
      // PSBT with invalid witnessScript typed key
      TestCase(
        hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d568102050047522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "psbt witness script key must contain exactly 1 byte"
      ),
      // PSBT with invalid bip32 typed key
      TestCase(
        hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae210603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd10b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000",
        "requirement failed"
      ),
      // PSBT with invalid non-witness utxo typed key
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f0000000000020000bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        "psbt non-witness utxo key must contain exactly 1 byte"
      ),
      // PSBT with invalid final scriptsig typed key
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000020700da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        "psbt script sig key must contain exactly 1 byte"
      ),
      // PSBT with invalid final script witness typed key
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903020800da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        "psbt script witness key must contain exactly 1 byte"
      ),
      // PSBT with invalid pubkey in output BIP 32 derivation paths typed key
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00210203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca58710d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        "requirement failed"
      ),
      // PSBT with invalid input sighash type typed key
      TestCase(
        hex"70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c0203000100000000010016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a65010125512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d2bd57f8a8751ae00",
        "psbt sighash type key must contain exactly 1 byte"
      ),
      // PSBT with invalid output redeemScript typed key
      TestCase(
        hex"70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c0002000016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a65010125512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d2bd57f8a8751ae00",
        "psbt redeem script key must contain exactly 1 byte"
      ),
      // PSBT with invalid output witnessScript typed key
      TestCase(
        hex"70736274ff0100730200000001301ae986e516a1ec8ac5b4bc6573d32f83b465e23ad76167d68b38e730b4dbdb0000000000ffffffff02747b01000000000017a91403aa17ae882b5d0d54b25d63104e4ffece7b9ea2876043993b0000000017a914b921b1ba6f722e4bfa83b6557a3139986a42ec8387000000000001011f00ca9a3b00000000160014d2d94b64ae08587eefc8eeb187c601e939f9037c00010016001462e9e982fff34dd8239610316b090cd2a3b747cb000100220020876bad832f1d168015ed41232a9ea65a1815d9ef13c0ef8759f64b5b2b278a6521010025512103b7ce23a01c5b4bf00a642537cdfabb315b668332867478ef51309d06d57f8a8751ae00",
        "psbt witness script key must contain exactly 1 byte"
      ),
      // PSBT with unsigned tx serialized with witness serialization format
      TestCase(
        hex"70736274ff01007802000000000101268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc78700b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab300000000000000",
        "not enough data to read from"
      ),

      /** ADDITIONAL TEST VECTORS */
      // PSBT missing inputs
      TestCase(
        hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000000",
        "len < 0"
      ),
      // PSBT missing outputs
      TestCase(
        hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab3000000000000",
        "len < 0"
      ))

    for (TestCase(bin, expected) <- testCases) {
      val psbt = Psbt.read(bin.toArray)
      assert(psbt.isFailure, bin.toHex)
      val Failure(ex) = psbt
      assert(ex.getMessage === expected, bin.toHex)
    }
  }

  test("invalids psbts (non-witness input utxos don't match tx)") {
    val inputTx1 = Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(ByteVector32(hex"75ddabb27b8845f5247975c8a5ba7c6f336c4570708ebe230caf6db5217ae858"), 1), hex"00208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903", 0)),
      txOut = Seq(
        TxOut(500 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d"),
        TxOut(750 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d")),
      lockTime = 0)
    val inputTx2 = Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(ByteVector32(hex"1dea7cd05979072a3578cab271c02244ea8a090bbb46aa680a65ecd027048d83"), 0), hex"00208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903", 0)),
      txOut = Seq(
        TxOut(800 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d"),
        TxOut(600 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d")),
      lockTime = 0)
    val tx = Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(inputTx1, 1), Nil, 0), TxIn(OutPoint(inputTx2, 0), Nil, 6)),
      txOut = Seq(TxOut(300 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d"), TxOut(1000 sat, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d")),
      lockTime = 3
    )
    val psbt = Psbt(tx)
    val Success(updated) = psbt.updateNonWitnessInput(inputTx1, 1, redeemScript = Some(Seq(OP_RETURN))).flatMap(_.updateNonWitnessInput(inputTx2, 0, redeemScript = Some(Seq(OP_RETURN))))

    val outputIndexMismatch = updated.copy(global = updated.global.copy(tx = Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(inputTx1, 3), Nil, 0), TxIn(OutPoint(inputTx2, 0), Nil, 6)),
      txOut = Seq(TxOut(300 sat, Nil), TxOut(1000 sat, Nil)),
      lockTime = 3
    )))
    assert(Psbt.fromBase64(Psbt.toBase64(outputIndexMismatch)).isFailure)

    val txIdMismatch = updated.copy(global = updated.global.copy(tx = Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(inputTx2, 1), Nil, 0), TxIn(OutPoint(inputTx2, 0), Nil, 6)),
      txOut = Seq(TxOut(300 sat, Nil), TxOut(1000 sat, Nil)),
      lockTime = 3
    )))
    assert(Psbt.fromBase64(Psbt.toBase64(txIdMismatch)).isFailure)
  }

  test("valid psbts (official test vectors)") {
    {
      // PSBT with one P2PKH input. Outputs are empty
      val bin = hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab300000000000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.global.version === 0)
      assert(psbt.global.extendedPublicKeys.isEmpty)
      assert(psbt.global.tx.txIn.length === 1)
      val Some(nonWitnessUtxo) = psbt.inputs.head.nonWitnessUtxo
      assert(nonWitnessUtxo.version === 1)
      assert(nonWitnessUtxo.txid === psbt.global.tx.txIn.head.outPoint.txid)
      assert(psbt.global.tx.txOut.length === 2)
      psbt.outputs.foreach(output => verifyEmptyOutput(output))
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with one P2PKH input and one P2SH-P2WPKH input. First input is signed and finalized. Outputs are empty
      val bin = hex"70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac000000000001076a47304402204759661797c01b036b25928948686218347d89864b719e1f7fcf57d1e511658702205309eabf56aa4d8891ffd111fdf1336f3a29da866d7f8486d75546ceedaf93190121035cdc61fc7ba971c0b501a646a2a83b102cb43881217ca682dc86e2d73fa882920001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb82308000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.global.version === 0)
      assert(psbt.global.extendedPublicKeys.isEmpty)
      assert(psbt.global.tx.txIn.length === 2)
      assert(psbt.inputs.head.scriptSig.nonEmpty)
      assert(psbt.inputs(1).witnessUtxo.nonEmpty)
      assert(psbt.inputs(1).nonWitnessUtxo.isEmpty)
      assert(psbt.inputs(1).redeemScript.nonEmpty)
      assert(psbt.global.tx.txOut.length === 2)
      psbt.outputs.foreach(output => verifyEmptyOutput(output))
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with one P2PKH input which has a non-final scriptSig and has a sighash type specified. Outputs are empty
      val bin = hex"70736274ff0100750200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf60000000000feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000100fda5010100000000010289a3c71eab4d20e0371bbba4cc698fa295c9463afa2e397f8533ccb62f9567e50100000017160014be18d152a9b012039daf3da7de4f53349eecb985ffffffff86f8aa43a71dff1448893a530a7237ef6b4608bbb2dd2d0171e63aec6a4890b40100000017160014fe3e9ef1a745e974d902c4355943abcb34bd5353ffffffff0200c2eb0b000000001976a91485cff1097fd9e008bb34af709c62197b38978a4888ac72fef84e2c00000017a914339725ba21efd62ac753a9bcd067d6c7a6a39d05870247304402202712be22e0270f394f568311dc7ca9a68970b8025fdd3b240229f07f8a5f3a240220018b38d7dcd314e734c9276bd6fb40f673325bc4baa144c800d2f2f02db2765c012103d2e15674941bad4a996372cb87e1856d3652606d98562fe39c5e9e7e413f210502483045022100d12b852d85dcd961d2f5f4ab660654df6eedcc794c0c33ce5cc309ffb5fce58d022067338a8e0e1725c197fb1a88af59f51e44e4255b20167c8684031c05d1f2592a01210223b72beef0965d10be0778efecd61fcac6f79a4ea169393380734464f84f2ab30000000001030401000000000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.inputs.length === 1)
      assert(psbt.inputs.head.nonWitnessUtxo.nonEmpty)
      assert(psbt.inputs.head.sighashType === Some(SIGHASH_ALL))
      psbt.outputs.foreach(output => verifyEmptyOutput(output))
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with one P2PKH input and one P2SH-P2WPKH input both with non-final scriptSigs. P2SH-P2WPKH input's redeemScript is available. Outputs filled.
      val bin = hex"70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac00000000000100df0200000001268171371edff285e937adeea4b37b78000c0566cbb3ad64641713ca42171bf6000000006a473044022070b2245123e6bf474d60c5b50c043d4c691a5d2435f09a34a7662a9dc251790a022001329ca9dacf280bdf30740ec0390422422c81cb45839457aeb76fc12edd95b3012102657d118d3357b8e0f4c2cd46db7b39f6d9c38d9a70abcb9b2de5dc8dbfe4ce31feffffff02d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e13000001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb8230800220202ead596687ca806043edc3de116cdf29d5e9257c196cd055cf698c8d02bf24e9910b4a6ba670000008000000080020000800022020394f62be9df19952c5587768aeb7698061ad2c4a25c894f47d8c162b4d7213d0510b4a6ba6700000080010000800200008000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.inputs.length === 2)
      assert(psbt.inputs.head.nonWitnessUtxo.nonEmpty)
      assert(psbt.inputs(1).witnessUtxo.nonEmpty)
      assert(psbt.inputs(1).redeemScript.nonEmpty)
      assert(psbt.outputs.length === 2)
      psbt.outputs.foreach(output => assert(output.derivationPaths.nonEmpty))
      assert(psbt.outputs.flatMap(_.derivationPaths.keySet).toSet === Set(PublicKey(hex"02ead596687ca806043edc3de116cdf29d5e9257c196cd055cf698c8d02bf24e99"), PublicKey(hex"0394f62be9df19952c5587768aeb7698061ad2c4a25c894f47d8c162b4d7213d05")))
      assert(psbt.outputs.flatMap(_.derivationPaths.values.map(_.masterKeyFingerprint)).toSet === Set(3030825575L))
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with one P2SH-P2WSH input of a 2-of-2 multisig, redeemScript, witnessScript, and keypaths are available. Contains one signature.
      val bin = hex"70736274ff0100550200000001279a2323a5dfb51fc45f220fa58b0fc13e1e3342792a85d7e36cd6333b5cbc390000000000ffffffff01a05aea0b000000001976a914ffe9c0061097cc3b636f2cb0460fa4fc427d2b4588ac0000000000010120955eea0b0000000017a9146345200f68d189e1adc0df1c4d16ea8f14c0dbeb87220203b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4646304302200424b58effaaa694e1559ea5c93bbfd4a89064224055cdf070b6771469442d07021f5c8eb0fea6516d60b8acb33ad64ede60e8785bfb3aa94b99bdf86151db9a9a010104220020771fd18ad459666dd49f3d564e3dbc42f4c84774e360ada16816a8ed488d5681010547522103b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd462103de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd52ae220603b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd4610b4a6ba67000000800000008004000080220603de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd10b4a6ba670000008000000080050000800000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.inputs.length === 1)
      val input = psbt.inputs.head
      val (pk1, pk2) = (PublicKey(hex"03b1341ccba7683b6af4f1238cd6e97e7167d569fac47f1e48d47541844355bd46"), PublicKey(hex"03de55d1e1dac805e3f8a58c1fbf9b94c02f3dbaafe127fefca4995f26f82083bd"))
      assert(input.derivationPaths.keySet === Set(pk1, pk2))
      assert(input.partialSigs.keySet === Set(pk1))
      assert(input.witnessScript === Some(Script.createMultiSigMofN(2, Seq(pk1, pk2))))
      assert(input.redeemScript === Some(Script.pay2wsh(input.witnessScript.get)))
      assert(input.nonWitnessUtxo.isEmpty)
      assert(input.witnessUtxo.map(_.publicKeyScript) === Some(Script.write(Script.pay2sh(Script.write(input.redeemScript.get)))))
      assert(psbt.outputs.length === 1)
      verifyEmptyOutput(psbt.outputs.head)
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with one P2WSH input of a 2-of-2 multisig. witnessScript, keypaths, and global xpubs are available. Contains no signatures. Outputs filled.
      val bin = hex"70736274ff01005202000000019dfc6628c26c5899fe1bd3dc338665bfd55d7ada10f6220973df2d386dec12760100000000ffffffff01f03dcd1d000000001600147b3a00bfdc14d27795c2b74901d09da6ef133579000000004f01043587cf02da3fd0088000000097048b1ad0445b1ec8275517727c87b4e4ebc18a203ffa0f94c01566bd38e9000351b743887ee1d40dc32a6043724f2d6459b3b5a4d73daec8fbae0472f3bc43e20cd90c6a4fae000080000000804f01043587cf02da3fd00880000001b90452427139cd78c2cff2444be353cd58605e3e513285e528b407fae3f6173503d30a5e97c8adbc557dac2ad9a7e39c1722ebac69e668b6f2667cc1d671c83cab0cd90c6a4fae000080010000800001012b0065cd1d000000002200202c5486126c4978079a814e13715d65f36459e4d6ccaded266d0508645bafa6320105475221029da12cdb5b235692b91536afefe5c91c3ab9473d8e43b533836ab456299c88712103372b34234ed7cf9c1fea5d05d441557927be9542b162eb02e1ab2ce80224c00b52ae2206029da12cdb5b235692b91536afefe5c91c3ab9473d8e43b533836ab456299c887110d90c6a4fae0000800000008000000000220603372b34234ed7cf9c1fea5d05d441557927be9542b162eb02e1ab2ce80224c00b10d90c6a4fae0000800100008000000000002202039eff1f547a1d5f92dfa2ba7af6ac971a4bd03ba4a734b03156a256b8ad3a1ef910ede45cc500000080000000800100008000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.global.extendedPublicKeys.map(_.extendedPublicKey.publicKey).toSet === Set(PublicKey(hex"03d30a5e97c8adbc557dac2ad9a7e39c1722ebac69e668b6f2667cc1d671c83cab"), PublicKey(hex"0351b743887ee1d40dc32a6043724f2d6459b3b5a4d73daec8fbae0472f3bc43e2")))
      assert(psbt.inputs.length === 1)
      val input = psbt.inputs.head
      val (pk1, pk2) = (PublicKey(hex"029da12cdb5b235692b91536afefe5c91c3ab9473d8e43b533836ab456299c8871"), PublicKey(hex"03372b34234ed7cf9c1fea5d05d441557927be9542b162eb02e1ab2ce80224c00b"))
      assert(input.nonWitnessUtxo.isEmpty)
      assert(input.redeemScript.isEmpty)
      assert(input.derivationPaths.keySet === Set(pk1, pk2))
      assert(input.witnessScript === Some(Script.createMultiSigMofN(2, Seq(pk1, pk2))))
      assert(input.witnessUtxo.map(_.publicKeyScript) === Some(Script.write(Script.pay2wsh(input.witnessScript.get))))
      assert(input.partialSigs.isEmpty)
      assert(psbt.outputs.length === 1)
      val output = psbt.outputs.head
      assert(output.redeemScript.isEmpty)
      assert(output.witnessScript.isEmpty)
      assert(output.derivationPaths.keySet === Set(PublicKey(hex"039eff1f547a1d5f92dfa2ba7af6ac971a4bd03ba4a734b03156a256b8ad3a1ef9")))
      // NB: we don't fully compare the encoded values because in this particular test vector, the BIP doesn't sort public keys lexicographically
      // so our result differs in the `derivationPaths` section.
      assert(Psbt.write(psbt).length === bin.length)
    }
    {
      // PSBT with unknown types in the inputs.
      val bin = hex"70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a010000000000000af00102030405060708090f0102030405060708090a0b0c0d0e0f0000"
      val Success(psbt) = Psbt.read(bin.toArray)
      assert(psbt.global.unknown.isEmpty)
      assert(psbt.inputs.length === 1)
      assert(psbt.inputs.head.unknown.nonEmpty)
      assert(psbt.outputs.length === 1)
      verifyEmptyOutput(psbt.outputs.head)
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with `PSBT_GLOBAL_XPUB`.
      val bin = hex"70736274ff01009d0100000002710ea76ab45c5cb6438e607e59cc037626981805ae9e0dfd9089012abb0be5350100000000ffffffff190994d6a8b3c8c82ccbcfb2fba4106aa06639b872a8d447465c0d42588d6d670000000000ffffffff0200e1f505000000001976a914b6bc2c0ee5655a843d79afedd0ccc3f7dd64340988ac605af405000000001600141188ef8e4ce0449eaac8fb141cbf5a1176e6a088000000004f010488b21e039e530cac800000003dbc8a5c9769f031b17e77fea1518603221a18fd18f2b9a54c6c8c1ac75cbc3502f230584b155d1c7f1cd45120a653c48d650b431b67c5b2c13f27d7142037c1691027569c503100008000000080000000800001011f00e1f5050000000016001433b982f91b28f160c920b4ab95e58ce50dda3a4a220203309680f33c7de38ea6a47cd4ecd66f1f5a49747c6ffb8808ed09039243e3ad5c47304402202d704ced830c56a909344bd742b6852dccd103e963bae92d38e75254d2bb424502202d86c437195df46c0ceda084f2a291c3da2d64070f76bf9b90b195e7ef28f77201220603309680f33c7de38ea6a47cd4ecd66f1f5a49747c6ffb8808ed09039243e3ad5c1827569c5031000080000000800000008000000000010000000001011f00e1f50500000000160014388fb944307eb77ef45197d0b0b245e079f011de220202c777161f73d0b7c72b9ee7bde650293d13f095bc7656ad1f525da5fd2e10b11047304402204cb1fb5f869c942e0e26100576125439179ae88dca8a9dc3ba08f7953988faa60220521f49ca791c27d70e273c9b14616985909361e25be274ea200d7e08827e514d01220602c777161f73d0b7c72b9ee7bde650293d13f095bc7656ad1f525da5fd2e10b1101827569c5031000080000000800000008000000000000000000000220202d20ca502ee289686d21815bd43a80637b0698e1fbcdbe4caed445f6c1a0a90ef1827569c50310000800000008000000080000000000400000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.global.extendedPublicKeys.map(_.extendedPublicKey.publicKey) === Seq(PublicKey(hex"02f230584b155d1c7f1cd45120a653c48d650b431b67c5b2c13f27d7142037c169")))
      assert(psbt.inputs.length === 2)
      psbt.inputs.foreach(input => {
        assert(input.partialSigs.size === 1)
        assert(input.derivationPaths.size === 1)
      })
      assert(psbt.outputs.length === 2)
      verifyEmptyOutput(psbt.outputs.head)
      assert(psbt.outputs(1).derivationPaths === Map(PublicKey(hex"02d20ca502ee289686d21815bd43a80637b0698e1fbcdbe4caed445f6c1a0a90ef") -> KeyPathWithMaster(659987536, KeyPath("m/49'/0'/0'/0/4"))))
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with global unsigned tx that has 0 inputs and 0 outputs
      val bin = hex"70736274ff01000a0000000000000000000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      assert(psbt.global.tx.txIn.isEmpty)
      assert(psbt.global.tx.txOut.isEmpty)
      assert(psbt.inputs.isEmpty)
      assert(psbt.outputs.isEmpty)
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
    {
      // PSBT with 0 inputs
      val bin = hex"70736274ff01004c020000000002d3dff505000000001976a914d0c59903c5bac2868760e90fd521a4665aa7652088ac00e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787b32e1300000000"
      val Success(psbt) = Psbt.read(bin.toArray)
      verifyNoUnknown(psbt)
      assert(psbt.inputs.isEmpty)
      assert(psbt.outputs.length === 2)
      psbt.outputs.foreach(verifyEmptyOutput)
      assert(Psbt.write(psbt) === bin.toArray, bin.toHex)
    }
  }

  test("base64-encoded psbts") {
    val notBase64 = "I'm not a PSBT, please don't tell"
    assert(Psbt.fromBase64(notBase64).isFailure)

    // PSBT with `PSBT_GLOBAL_XPUB`.
    val psbtStr = "cHNidP8BAJ0BAAAAAnEOp2q0XFy2Q45gflnMA3YmmBgFrp4N/ZCJASq7C+U1AQAAAAD/////GQmU1qizyMgsy8+y+6QQaqBmObhyqNRHRlwNQliNbWcAAAAAAP////8CAOH1BQAAAAAZdqkUtrwsDuVlWoQ9ea/t0MzD991kNAmIrGBa9AUAAAAAFgAUEYjvjkzgRJ6qyPsUHL9aEXbmoIgAAAAATwEEiLIeA55TDKyAAAAAPbyKXJdp8DGxfnf+oVGGAyIaGP0Y8rmlTGyMGsdcvDUC8jBYSxVdHH8c1FEgplPEjWULQxtnxbLBPyfXFCA3wWkQJ1acUDEAAIAAAACAAAAAgAABAR8A4fUFAAAAABYAFDO5gvkbKPFgySC0q5XljOUN2jpKIgIDMJaA8zx9446mpHzU7NZvH1pJdHxv+4gI7QkDkkPjrVxHMEQCIC1wTO2DDFapCTRL10K2hS3M0QPpY7rpLTjnUlTSu0JFAiAthsQ3GV30bAztoITyopHD2i1kBw92v5uQsZXn7yj3cgEiBgMwloDzPH3jjqakfNTs1m8fWkl0fG/7iAjtCQOSQ+OtXBgnVpxQMQAAgAAAAIAAAACAAAAAAAEAAAAAAQEfAOH1BQAAAAAWABQ4j7lEMH63fvRRl9CwskXgefAR3iICAsd3Fh9z0LfHK57nveZQKT0T8JW8dlatH1Jdpf0uELEQRzBEAiBMsftfhpyULg4mEAV2ElQ5F5rojcqKncO6CPeVOYj6pgIgUh9JynkcJ9cOJzybFGFphZCTYeJb4nTqIA1+CIJ+UU0BIgYCx3cWH3PQt8crnue95lApPRPwlbx2Vq0fUl2l/S4QsRAYJ1acUDEAAIAAAACAAAAAgAAAAAAAAAAAAAAiAgLSDKUC7iiWhtIYFb1DqAY3sGmOH7zb5MrtRF9sGgqQ7xgnVpxQMQAAgAAAAIAAAACAAAAAAAQAAAAA"
    val psbtBin = hex"70736274ff01009d0100000002710ea76ab45c5cb6438e607e59cc037626981805ae9e0dfd9089012abb0be5350100000000ffffffff190994d6a8b3c8c82ccbcfb2fba4106aa06639b872a8d447465c0d42588d6d670000000000ffffffff0200e1f505000000001976a914b6bc2c0ee5655a843d79afedd0ccc3f7dd64340988ac605af405000000001600141188ef8e4ce0449eaac8fb141cbf5a1176e6a088000000004f010488b21e039e530cac800000003dbc8a5c9769f031b17e77fea1518603221a18fd18f2b9a54c6c8c1ac75cbc3502f230584b155d1c7f1cd45120a653c48d650b431b67c5b2c13f27d7142037c1691027569c503100008000000080000000800001011f00e1f5050000000016001433b982f91b28f160c920b4ab95e58ce50dda3a4a220203309680f33c7de38ea6a47cd4ecd66f1f5a49747c6ffb8808ed09039243e3ad5c47304402202d704ced830c56a909344bd742b6852dccd103e963bae92d38e75254d2bb424502202d86c437195df46c0ceda084f2a291c3da2d64070f76bf9b90b195e7ef28f77201220603309680f33c7de38ea6a47cd4ecd66f1f5a49747c6ffb8808ed09039243e3ad5c1827569c5031000080000000800000008000000000010000000001011f00e1f50500000000160014388fb944307eb77ef45197d0b0b245e079f011de220202c777161f73d0b7c72b9ee7bde650293d13f095bc7656ad1f525da5fd2e10b11047304402204cb1fb5f869c942e0e26100576125439179ae88dca8a9dc3ba08f7953988faa60220521f49ca791c27d70e273c9b14616985909361e25be274ea200d7e08827e514d01220602c777161f73d0b7c72b9ee7bde650293d13f095bc7656ad1f525da5fd2e10b1101827569c5031000080000000800000008000000000000000000000220202d20ca502ee289686d21815bd43a80637b0698e1fbcdbe4caed445f6c1a0a90ef1827569c50310000800000008000000080000000000400000000"
    val Success(psbt) = Psbt.fromBase64(psbtStr)
    assert(Psbt.toBase64(psbt) === psbtStr)
    assert(Psbt.write(psbt) === psbtBin.toArray)
  }

  test("fails signer checks (official test vectors)") {
    case class TestCase(bin: ByteVector, inputIndex: Int, expected: String)
    val testCases = Seq(
      // A witness UTXO is provided for a non-witness input
      TestCase(
        hex"70736274ff0100a00200000002ab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40000000000feffffffab0949a08c5af7c49b8212f417e2f15ab3f5c33dcf153821a8139f877a5b7be40100000000feffffff02603bea0b000000001976a914768a40bbd740cbe81d988e71de2a4d5c71396b1d88ac8e240000000000001976a9146f4620b553fa095e721b9ee0efe9fa039cca459788ac0000000000010122d3dff505000000001976a914d48ed3110b94014cb114bd32d6f4d066dc74256b88ac0001012000e1f5050000000017a9143545e6e33b832c47050f24d3eeb93c9c03948bc787010416001485d13537f2e265405a34dbafa9e3dda01fb8230800220202ead596687ca806043edc3de116cdf29d5e9257c196cd055cf698c8d02bf24e9910b4a6ba670000008000000080020000800022020394f62be9df19952c5587768aeb7698061ad2c4a25c894f47d8c162b4d7213d0510b4a6ba6700000080010000800200008000",
        0,
        "witness utxo must use native segwit or P2SH embedded segwit"
      ),
      // redeemScript with non-witness UTXO does not match the scriptPubKey
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752af2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        0,
        "redeem script does not match non-witness utxo scriptPubKey"
      ),
      // redeemScript with witness UTXO does not match the scriptPubKey
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028900010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        1,
        "redeem script does not match witness utxo scriptPubKey"
      ),
      // witnessScript with witness UTXO does not match the redeemScript
      TestCase(
        hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ad2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000",
        1,
        "witness script does not match redeemScript or scriptPubKey"
      ))

    for (TestCase(bin, inputIndex, expected) <- testCases) {
      val Success(psbt) = Psbt.read(bin.toArray)
      val signed = psbt.sign(masterPrivKey.privateKey, inputIndex)
      assert(signed.isFailure, bin.toHex)
      val Failure(ex) = signed
      assert(ex.getMessage === expected, bin.toHex)
    }
  }

  test("create PSBT (official test vectors)") {
    val unsignedTx = Transaction(
      version = 2,
      txIn = Seq(
        TxIn(OutPoint(ByteVector32(hex"75ddabb27b8845f5247975c8a5ba7c6f336c4570708ebe230caf6db5217ae858").reverse, 0), Nil, TxIn.SEQUENCE_FINAL),
        TxIn(OutPoint(ByteVector32(hex"1dea7cd05979072a3578cab271c02244ea8a090bbb46aa680a65ecd027048d83").reverse, 1), Nil, TxIn.SEQUENCE_FINAL)
      ),
      txOut = Seq(
        TxOut(1.4999.btc.toSatoshi, hex"0014d85c2b71d0060b09c9886aeb815e50991dda124d"),
        TxOut(1.btc.toSatoshi, hex"001400aea9a2e5f0f876a588df5546e8742d1d87008f")
      ),
      lockTime = 0)
    val psbt = Psbt(unsignedTx)
    assert(Psbt.write(psbt) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000".toArray)
  }

  test("update PSBT (official test vectors)") {
    val firstInputTx = Transaction.read(hex"0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000".toArray)
    val firstInputIndex = 0
    val secondInputTx = Transaction.read(hex"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000".toArray)
    val secondInputIndex = 1
    // Updated PSBT from the previous step.
    val Success(psbt) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000".toArray)
    // Update input 1 with a non-witness multi-sig utxo:
    val Success(withOneInput) = psbt.updateNonWitnessInput(
      firstInputTx,
      firstInputIndex,
      Some(Script.createMultiSigMofN(2, Seq(PublicKey(hex"029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f"), PublicKey(hex"02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7")))),
      derivationPaths = Map(
        PublicKey(hex"029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/0'")),
        PublicKey(hex"02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/1'"))
      ))
    // Update input 2 with a witness multi-sig utxo:
    val Success(withBothInputs) = withOneInput.updateWitnessInputTx(
      secondInputTx,
      secondInputIndex,
      Some(Script.pay2wsh(Script.createMultiSigMofN(2, Seq(PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc"), PublicKey(hex"023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73"))))),
      Some(Script.createMultiSigMofN(2, Seq(PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc"), PublicKey(hex"023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73")))),
      derivationPaths = Map(
        PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/2'")),
        PublicKey(hex"023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/3'"))
      ))
    // Update outputs with known derivation paths:
    val Success(withInputsAndOutputs) = withBothInputs
      .updateNonWitnessOutput(0, derivationPaths = Map(PublicKey(hex"03a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca58771") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/4'"))))
      .flatMap(_.updateWitnessOutput(1, derivationPaths = Map(PublicKey(hex"027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b50051096") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/5'")))))
    // We differ from the official test vector because we include both witnessUtxo and nonWitnessUtxo, because of https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#cite_note-8
    assert(Psbt.write(withInputsAndOutputs) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080000100f80200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f796500000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    // But if we remove the nonWitnessUtxo in the second input, we match the official test vector:
    val withOnlyWitnessUtxo = withInputsAndOutputs.copy(
      inputs = Seq(withInputsAndOutputs.inputs.head, withInputsAndOutputs.inputs(1).asInstanceOf[PartiallySignedWitnessInput].copy(nonWitnessUtxo = None))
    )
    assert(Psbt.write(withOnlyWitnessUtxo) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    // Update inputs to use SIGHASH_ALL:
    val Success(withSighash) = withInputsAndOutputs.updateNonWitnessInput(
      firstInputTx,
      firstInputIndex,
      sighashType = Some(SIGHASH_ALL)
    ).flatMap(_.updateWitnessInputTx(
      secondInputTx,
      secondInputIndex,
      sighashType = Some(SIGHASH_ALL)
    ))
    assert(Psbt.write(withSighash) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080000100f80200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f796500000001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
  }

  test("sign PSBT (official test vectors)") {
    // Updated PSBT from the previous steps.
    val Success(psbt) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)

    def sign(keys: Map[Int, ExtendedPrivateKey]): Psbt = keys.foldLeft(psbt) {
      case (cur, (inputIndex, priv)) => cur.sign(priv.privateKey, inputIndex) match {
        case Success(signed) => signed.psbt
        case Failure(ex) => fail(ex)
      }
    }

    {
      // First signer.
      val inputKeys = Map(
        0 -> DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/0'")),
        1 -> DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/2'"))
      )
      assert(inputKeys.values.map(_.privateKey.toBase58(Base58.Prefix.SecretKeyTestnet)).toSet === Set("cP53pDbR5WtAD8dYAW9hhTjuvvTVaEiQBdrz9XPrgLBeRFiyCbQr", "cR6SXDoyfQrcp4piaiHE97Rsgta9mNhGTen9XeonVgwsh4iSgw6d"))
      val signed = sign(inputKeys)
      assert(Psbt.write(signed) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    }
    {
      // Second signer.
      val inputKeys = Map(
        0 -> DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/1'")),
        1 -> DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/3'"))
      )
      assert(inputKeys.values.map(_.privateKey.toBase58(Base58.Prefix.SecretKeyTestnet)).toSet === Set("cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au", "cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE"))
      val signed = sign(inputKeys)
      assert(Psbt.write(signed) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    }
  }

  test("combine PSBTs (official test vectors)") {
    val Success(psbt1) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    val Success(psbt2) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    val Success(psbt) = Psbt.combine(psbt1, psbt2)
    // NB: the official test vector doesn't order partial signatures with lexicographic ordering, so we disagree on the order but the content is ok.
    val expectedBin = hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f012202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"
    assert(Psbt.write(psbt).length === expectedBin.length)
    val Success(expectedPsbt) = Psbt.read(expectedBin.toArray)
    for (i <- 0 to 1) {
      assert(psbt.inputs(i).partialSigs.keySet === expectedPsbt.inputs(i).partialSigs.keySet)
      assert(psbt.inputs(i).partialSigs.values.toSet === expectedPsbt.inputs(i).partialSigs.values.toSet)
    }
  }

  test("combine PSBTs with unknown keys (official test vectors)") {
    val Success(psbt1) = Psbt.read(hex"70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000af00102030405060708090f0102030405060708090a0b0c0d0e0f000af00102030405060708090f0102030405060708090a0b0c0d0e0f000af00102030405060708090f0102030405060708090a0b0c0d0e0f00".toArray)
    val Success(psbt2) = Psbt.read(hex"70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000af00102030405060708100f0102030405060708090a0b0c0d0e0f000af00102030405060708100f0102030405060708090a0b0c0d0e0f000af00102030405060708100f0102030405060708090a0b0c0d0e0f00".toArray)
    val Success(psbt) = Psbt.combine(psbt1, psbt2)
    assert(Psbt.write(psbt) === hex"70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000af00102030405060708090f0102030405060708090a0b0c0d0e0f0af00102030405060708100f0102030405060708090a0b0c0d0e0f000af00102030405060708090f0102030405060708090a0b0c0d0e0f0af00102030405060708100f0102030405060708090a0b0c0d0e0f000af00102030405060708090f0102030405060708090a0b0c0d0e0f0af00102030405060708100f0102030405060708090a0b0c0d0e0f00".toArray)
  }

  test("combine PSBTs") {
    val inputTx1 = Transaction(2, Nil, TxOut(500 sat, Nil) :: TxOut(1500 sat, Nil) :: TxOut(10000 sat, hex"11223344") :: Nil, 0)
    val input1 = OutPoint(inputTx1, 2)
    val inputTx2 = Transaction(2, Nil, TxOut(7500 sat, hex"ff01ee02dd03") :: TxOut(250 sat, Nil) :: Nil, 0)
    val input2 = OutPoint(inputTx2, 0)
    val globalTx = Transaction(2, TxIn(input1, Nil, 0) :: TxIn(input2, Nil, 0) :: Nil, TxOut(5000 sat, hex"01020304") :: TxOut(6000 sat, hex"abcdef") :: Nil, 0)
    val Success(psbt1) = Psbt(globalTx)
      .updateWitnessInputTx(inputTx1, 2, None, Some(Seq(OP_1)), Some(SIGHASH_ALL), Map(PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/2'"))))
      .flatMap(_.updateNonWitnessInput(inputTx2, 0, Some(Seq(OP_RETURN)), Some(SIGHASH_SINGLE)))
      .flatMap(_.updateNonWitnessOutput(0, derivationPaths = Map(PublicKey(hex"03a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca58771") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/4'")))))
    val Success(psbt2) = Psbt(globalTx)
      .updateNonWitnessInput(inputTx1, 2, Some(Seq(OP_2DROP)), Some(SIGHASH_NONE), Map(PublicKey(hex"02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/1'"))))
      .flatMap(_.updateWitnessInputTx(inputTx2, 0, None, Some(Seq(OP_8))))
    val Success(psbt3) = Psbt(globalTx)
      .updateNonWitnessOutput(0, Some(Seq(OP_DIV)), Map(PublicKey(hex"027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b50051096") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/5'"))))
      .flatMap(_.updateWitnessOutput(1, Some(Seq(OP_4)), Some(Seq(OP_ADD))))
    val Success(combined) = Psbt.combine(psbt1, psbt2, psbt3)
    val expected = Psbt(
      Global(0, globalTx, Nil, Nil),
      Seq(
        PartiallySignedWitnessInput(
          inputTx1.txOut(2),
          Some(inputTx1),
          Some(SIGHASH_ALL),
          Map.empty,
          Map(
            PublicKey(hex"02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/1'")),
            PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/2'")),
          ),
          Some(Seq(OP_2DROP)),
          Some(Seq(OP_1)),
          Set.empty, Set.empty, Set.empty, Set.empty, Seq.empty
        ),
        PartiallySignedWitnessInput(
          inputTx2.txOut(0),
          Some(inputTx2),
          Some(SIGHASH_SINGLE),
          Map.empty,
          Map.empty,
          Some(Seq(OP_RETURN)),
          Some(Seq(OP_8)),
          Set.empty, Set.empty, Set.empty, Set.empty, Seq.empty
        )
      ),
      Seq(
        NonWitnessOutput(
          Some(Seq(OP_DIV)),
          Map(
            PublicKey(hex"03a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca58771") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/4'")),
            PublicKey(hex"027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b50051096") -> KeyPathWithMaster(DeterministicWallet.fingerprint(masterPrivKey), KeyPath("m/0'/0'/5'")),
          ),
          Seq.empty
        ),
        WitnessOutput(Some(Seq(OP_4)), Some(Seq(OP_ADD)), Map.empty, Seq.empty)
      )
    )
    assert(combined === expected)
  }

  test("finalize PSBT (official test vectors)") {
    val Success(psbt) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f012202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    val Success(finalized0) = {
      // The first input is a non-witness 2-of-2 multisig:
      val sig1 = psbt.inputs.head.partialSigs(PublicKey(hex"029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f"))
      val sig2 = psbt.inputs.head.partialSigs(PublicKey(hex"02dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7"))
      val redeemScript = Script.write(psbt.inputs.head.redeemScript.get)
      val scriptSig = OP_0 :: OP_PUSHDATA(sig1) :: OP_PUSHDATA(sig2) :: OP_PUSHDATA(redeemScript) :: Nil
      psbt.finalizeNonWitnessInput(0, scriptSig)
    }
    val Success(finalized1) = {
      // The second input is a P2SH witness program of a 2-of-2 multisig:
      val sig1 = psbt.inputs(1).partialSigs(PublicKey(hex"03089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc"))
      val sig2 = psbt.inputs(1).partialSigs(PublicKey(hex"023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73"))
      val witnessScript = Script.write(psbt.inputs(1).witnessScript.get)
      val scriptWitness = ScriptWitness(ByteVector.empty :: sig1 :: sig2 :: witnessScript :: Nil)
      finalized0.finalizeWitnessInput(1, scriptWitness)
    }
    assert(Psbt.write(finalized1) === hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
  }

  test("extract transaction (official test vectors)") {
    val Success(psbt) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000".toArray)
    val Success(tx) = psbt.extract()
    assert(Transaction.write(tx) === hex"0200000000010258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7500000000da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752aeffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00000000")
  }

  test("join PSBTs") {
    val input1 = TxIn(OutPoint(ByteVector32(hex"2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a"), 0), hex"2a", 42)
    val output1 = TxOut(500 sat, hex"2a2a")
    val psbt1 = Psbt(Transaction(
      version = 2,
      txIn = Seq(input1),
      txOut = Seq(output1),
      lockTime = 0
    ))

    val input2 = TxIn(OutPoint(ByteVector32(hex"2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a"), 3), hex"2a2a2a", 0)
    val psbt2 = Psbt(Transaction(
      version = 2,
      txIn = Seq(input2),
      txOut = Nil,
      lockTime = 0
    ))

    val output2 = TxOut(1200 sat, hex"2a2a2a2a2a")
    val psbt3 = Psbt(Transaction(
      version = 2,
      txIn = Nil,
      txOut = Seq(output2),
      lockTime = 0
    ))

    val Success(psbt) = Psbt.join(psbt1, psbt2, psbt3)
    assert(psbt.inputs.length === 2)
    assert(psbt.outputs.length === 2)
    assert(psbt.global.tx === Transaction(
      version = 2,
      txIn = Seq(
        TxIn(OutPoint(ByteVector32(hex"2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a"), 0), Nil, 42),
        TxIn(OutPoint(ByteVector32(hex"2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a"), 3), Nil, 0)
      ),
      txOut = Seq(output1, output2),
      lockTime = 0
    ))

    assert(Psbt.join().isFailure) // missing PSBTs
    assert(Psbt.join(psbt, psbt1).isFailure) // same utxo spent by both PSBTs
    assert(Psbt.join(psbt1, psbt2.copy(global = psbt2.global.copy(version = 3))).isFailure) // version mismatch
    assert(Psbt.join(psbt1, Psbt(psbt2.global.tx.copy(version = 1))).isFailure) // tx version mismatch
    assert(Psbt.join(psbt1, Psbt(psbt2.global.tx.copy(lockTime = 1))).isFailure) // tx lockTime mismatch
  }

  test("compute fees") {
    val inputTx1 = Transaction(2, Nil, Seq(TxOut(500 sat, Nil), TxOut(750 sat, Nil)), 0)
    val inputTx2 = Transaction(2, Nil, Seq(TxOut(800 sat, Nil), TxOut(600 sat, Nil)), 0)
    val psbt = Psbt(Transaction(
      version = 2,
      txIn = Seq(TxIn(OutPoint(inputTx1, 1), Nil, 0), TxIn(OutPoint(inputTx2, 0), Nil, 6)),
      txOut = Seq(TxOut(300 sat, Nil), TxOut(1000 sat, Nil)),
      lockTime = 3
    ))

    assert(psbt.computeFees().isFailure) // inputs have not been updated yet
    val Success(oneInput) = psbt.updateWitnessInputTx(inputTx1, 1, witnessScript = Some(Seq(OP_RETURN)))
    assert(oneInput.computeFees().isFailure) // second input has not been updated yet
    val Success(bothInputs) = oneInput.updateNonWitnessInput(inputTx2, 0, redeemScript = Some(Seq(OP_RETURN)))
    assert(bothInputs.computeFees() === Success(250 sat))
  }

  test("preimage challenges") {
    val Success(withPreimageChallenges) = Psbt.read(hex"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000".toArray)
      .flatMap(_.updatePreimageChallenges(0, Set(hex"01020304", hex"0102"), Set.empty, Set(hex"123456"), Set(hex"abcdef", hex"00000000")))
      .flatMap(_.updatePreimageChallenges(1, Set(hex"0102"), Set(hex"123456", hex"11"), Set.empty, Set(hex"abcdef", hex"00000000")))
    assert(withPreimageChallenges.inputs.head.hash160 === Set(hex"123456"))
    assert(withPreimageChallenges.inputs.last.sha256 === Set(hex"123456", hex"11"))
    val Success(decoded) = Psbt.read(Psbt.write(withPreimageChallenges))
    assert(decoded === withPreimageChallenges)
  }

  test("create psbt with various input types") {
    val masterFingerprint = DeterministicWallet.fingerprint(masterPrivKey)
    val priv1 = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/3'/1'")).privateKey
    val priv2 = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/3'/2'")).privateKey
    val priv3 = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/3'/3'")).privateKey
    val pubKeys = Seq(priv1, priv2, priv3).map(_.publicKey)
    val allDerivationPaths = Map(
      priv1.publicKey -> KeyPathWithMaster(masterFingerprint, KeyPath("m/0'/3'/1'")),
      priv2.publicKey -> KeyPathWithMaster(masterFingerprint, KeyPath("m/0'/3'/2'")),
      priv3.publicKey -> KeyPathWithMaster(masterFingerprint, KeyPath("m/0'/3'/3'")),
    )
    val inputTx = Transaction(
      2,
      Nil,
      Seq(
        TxOut(15000 sat, Script.pay2pkh(priv1.publicKey)),
        TxOut(12000 sat, Script.pay2sh(Script.createMultiSigMofN(2, pubKeys))),
        TxOut(16000 sat, Script.pay2sh(Script.pay2wpkh(priv2.publicKey))),
        TxOut(11000 sat, Script.pay2wpkh(priv3.publicKey)),
        TxOut(13000 sat, Script.pay2wsh(Script.createMultiSigMofN(2, pubKeys))),
        TxOut(10000 sat, Script.pay2sh(Script.pay2wsh(Script.createMultiSigMofN(1, pubKeys))))
      ),
      0
    )
    val globalTx = Transaction(
      2,
      (0 to 5).map(i => TxIn(OutPoint(inputTx, i), Nil, 0)),
      Seq(TxOut(60000 sat, Script.pay2wsh(Script.createMultiSigMofN(1, pubKeys.drop(1))))),
      0
    )
    val psbt = Psbt(globalTx)
    assert(psbt.getInput(2) === Some(PartiallySignedInputWithoutUtxo(None, Map.empty, Set.empty, Set.empty, Set.empty, Set.empty, Seq.empty)))
    assert(psbt.getInput(6) === None)
    assert(psbt.getInput(OutPoint(inputTx, 1)) === Some(PartiallySignedInputWithoutUtxo(None, Map.empty, Set.empty, Set.empty, Set.empty, Set.empty, Seq.empty)))
    assert(psbt.getInput(OutPoint(ByteVector32.Zeroes, 0)) === None)

    // We can't sign the psbt before adding the utxo details (updater role).
    assert(psbt.sign(priv1, 0).isFailure)
    assert(psbt.sign(priv3, OutPoint(inputTx, 3)).isFailure)

    // Update all inputs and outputs.
    val Success(updated) = psbt
      .updateNonWitnessInput(inputTx, 0, None, Some(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY), Map(priv1.publicKey -> KeyPathWithMaster(masterFingerprint, KeyPath("m/0'/3'/1'"))))
      .flatMap(_.updateNonWitnessInput(inputTx, 1, Some(Script.createMultiSigMofN(2, pubKeys)), Some(SIGHASH_ALL), allDerivationPaths))
      .flatMap(_.updateWitnessInputTx(inputTx, 2, Some(Script.pay2wpkh(priv2.publicKey)), Some(Script.pay2pkh(priv2.publicKey))))
      .flatMap(_.updateWitnessInputTx(inputTx, 3, None, Some(Script.pay2pkh(priv3.publicKey)), Some(SIGHASH_SINGLE), Map(priv3.publicKey -> KeyPathWithMaster(masterFingerprint, KeyPath("m/0'/3'/3'")))))
      .flatMap(_.updateWitnessInputTx(inputTx, 4, None, Some(Script.createMultiSigMofN(2, pubKeys))))
      .flatMap(_.updateWitnessInputTx(inputTx, 5, Some(Script.pay2wsh(Script.createMultiSigMofN(1, pubKeys))), Some(Script.createMultiSigMofN(1, pubKeys))))
      .flatMap(_.updateWitnessOutput(0, Some(Script.createMultiSigMofN(1, pubKeys.drop(1))), None, allDerivationPaths - priv1.publicKey))

    assert(updated.getInput(0).get.asInstanceOf[PartiallySignedNonWitnessInput].sighashType === Some(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY))
    assert(updated.getInput(OutPoint(inputTx, 2)).get.asInstanceOf[PartiallySignedWitnessInput].redeemScript === Some(Script.pay2wpkh(priv2.publicKey)))
    // We reject invalid updates.
    assert(updated.updateWitnessInputTx(inputTx, 1, sighashType = Some(SIGHASH_ALL)).isFailure)
    assert(updated.updateNonWitnessInput(inputTx, 3, derivationPaths = allDerivationPaths).isFailure)

    val Success(SignPsbtResult(signed, _)) = updated
      .sign(priv1, 0)
      .flatMap(_.psbt.sign(priv1, 1))
      .flatMap(_.psbt.sign(priv2, OutPoint(inputTx, 1)))
      .flatMap(_.psbt.sign(priv2, 2))
      .flatMap(_.psbt.sign(priv3, OutPoint(inputTx, 3)))
      .flatMap(_.psbt.sign(priv2, 4))
      .flatMap(_.psbt.sign(priv3, OutPoint(inputTx, 4)))
      .flatMap(_.psbt.sign(priv2, 5))

    assert(signed.getInput(0).get.partialSigs.size === 1)
    assert(signed.getInput(OutPoint(inputTx, 4)).get.partialSigs.size === 2)
    assert(signed.getInput(5).get.partialSigs.size === 1)
    assert(signed.finalizeWitnessInput(0, ScriptWitness(Seq(priv1.publicKey.value))).isFailure)
    assert(signed.finalizeNonWitnessInput(3, OP_PUSHDATA(priv1.publicKey) :: Nil).isFailure)

    val scriptSig0 = {
      val sig = signed.getInput(0).get.partialSigs(priv1.publicKey)
      OP_PUSHDATA(sig) :: OP_PUSHDATA(priv1.publicKey) :: Nil
    }
    val scriptSig1 = {
      val sig1 = signed.getInput(1).get.partialSigs(priv1.publicKey)
      val sig2 = signed.getInput(1).get.partialSigs(priv2.publicKey)
      val redeemScript = Script.write(Script.createMultiSigMofN(2, pubKeys))
      OP_0 :: OP_PUSHDATA(sig1) :: OP_PUSHDATA(sig2) :: OP_PUSHDATA(redeemScript) :: Nil
    }
    val scriptWitness2 = {
      val sig = signed.getInput(2).get.partialSigs(priv2.publicKey)
      Script.witnessPay2wpkh(priv2.publicKey, sig)
    }
    val scriptWitness3 = {
      val sig = signed.getInput(3).get.partialSigs(priv3.publicKey)
      Script.witnessPay2wpkh(priv3.publicKey, sig)
    }
    val scriptWitness4 = {
      val sig1 = signed.getInput(4).get.partialSigs(priv2.publicKey)
      val sig2 = signed.getInput(4).get.partialSigs(priv3.publicKey)
      Script.witnessMultiSigMofN(pubKeys, Seq(sig1, sig2))
    }
    val scriptWitness5 = {
      val sig = signed.getInput(5).get.partialSigs(priv2.publicKey)
      Script.witnessMultiSigMofN(pubKeys, Seq(sig))
    }

    val Success(finalized) = signed
      .finalizeNonWitnessInput(0, scriptSig0)
      .flatMap(_.finalizeNonWitnessInput(1, scriptSig1))
      .flatMap(_.finalizeWitnessInput(OutPoint(inputTx, 2), scriptWitness2))
      .flatMap(_.finalizeWitnessInput(3, scriptWitness3))
      .flatMap(_.finalizeWitnessInput(4, scriptWitness4))
      .flatMap(_.finalizeWitnessInput(OutPoint(inputTx, 5), scriptWitness5))

    assert(finalized.extract().isSuccess)
    // Once the psbt is finalized, we reject updates.
    assert(finalized.sign(priv2, 2).isFailure)
    assert(finalized.finalizeWitnessInput(3, scriptWitness3).isFailure)
  }

  test("bump lightning commit tx fee from cold wallet") {
    def anchorScript(fundingPubKey: PublicKey): Seq[ScriptElt] = {
      // @formatter:off
      OP_PUSHDATA(fundingPubKey) :: OP_CHECKSIG :: OP_IFDUP ::
      OP_NOTIF ::
        OP_16 :: OP_CHECKSEQUENCEVERIFY ::
      OP_ENDIF :: Nil
      // @formatter:on
    }

    // A lightning node prepares a PSBT that spends the anchor output of a commitment transaction.
    val (fundingPubKey, lightningPsbt) = {
      val fundingPrivKey = PrivateKey(hex"0101010101010101010101010101010101010101010101010101010101010101")
      val script = anchorScript(fundingPrivKey.publicKey)
      val txToBump = Transaction(2, Nil, Seq(TxOut(330 sat, Script.pay2wsh(script))), 0)
      val Success(SignPsbtResult(lightningPsbt, _)) = Psbt(Transaction(2, Seq(TxIn(OutPoint(txToBump, 0), Nil, 0)), Nil, 0))
        .updateWitnessInputTx(txToBump, 0, None, Some(script), Some(SIGHASH_NONE | SIGHASH_ANYONECANPAY))
        .flatMap(_.sign(fundingPrivKey, 0))
      (fundingPrivKey.publicKey, lightningPsbt)
    }

    // A cold wallet adds inputs and finalizes a transaction that bumps the fees of the commitment transaction.
    val walletPrivKey = PrivateKey(hex"0202020202020202020202020202020202020202020202020202020202020202")
    val confirmedTx = Transaction(2, Nil, Seq(TxOut(100_000 sat, Script.pay2wpkh(walletPrivKey.publicKey))), 0)
    val finalTx_opt = Psbt.join(lightningPsbt, Psbt(Transaction(2, Seq(TxIn(OutPoint(confirmedTx, 0), Nil, 0)), Seq(TxOut(75_000 sat, Script.pay2wpkh(walletPrivKey.publicKey))), 0)))
      .flatMap(_.updateWitnessInputTx(confirmedTx, 0, None, Some(Script.pay2pkh(walletPrivKey.publicKey))))
      .flatMap(_.sign(walletPrivKey, 1))
      .flatMap(signResult => signResult.psbt.finalizeWitnessInput(0, ScriptWitness(Seq(signResult.psbt.inputs.head.partialSigs(fundingPubKey), Script.write(anchorScript(fundingPubKey))))))
      .flatMap(psbt => psbt.finalizeWitnessInput(1, Script.witnessPay2wpkh(walletPrivKey.publicKey, psbt.inputs(1).partialSigs(walletPrivKey.publicKey))))
      .flatMap(_.extract())
    assert(finalTx_opt.isSuccess)
  }

  test("manual coinjoin workflow") {
    val alicePrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/1'")).privateKey
    val aliceNextPubKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/2'")).publicKey
    val aliceInputTx = Transaction(2, Nil, Seq(TxOut(50000 sat, Script.pay2wpkh(alicePrivKey.publicKey))), 0)
    val bobPrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/1'/1'")).privateKey
    val bobNextPubKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/1'/2'")).publicKey
    val bobInputTx = Transaction(2, Nil, Seq(TxOut(40000 sat, Script.pay2wpkh(bobPrivKey.publicKey))), 0)
    val carolPrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/2'/1'")).privateKey
    val carolNextPubKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/2'/2'")).publicKey
    val carolInputTx = Transaction(2, Nil, Seq(TxOut(60000 sat, Script.pay2wpkh(carolPrivKey.publicKey))), 0)

    // Each participant adds their inputs and fills their utxos.
    val Success(alicePsbt) = Psbt(Transaction(2, Seq(TxIn(OutPoint(aliceInputTx, 0), Nil, 0)), Seq(TxOut(50000 sat, Script.pay2wpkh(aliceNextPubKey))), 0))
      .updateWitnessInputTx(aliceInputTx, 0, None, Some(Script.pay2pkh(alicePrivKey.publicKey)), Some(SIGHASH_ALL))
    val Success(bobPsbt) = Psbt(Transaction(2, Seq(TxIn(OutPoint(bobInputTx, 0), Nil, 0)), Seq(TxOut(50000 sat, Script.pay2wpkh(bobNextPubKey))), 0))
      .updateWitnessInput(OutPoint(bobInputTx, 0), bobInputTx.txOut.head, None, Some(Script.pay2pkh(bobPrivKey.publicKey)), Some(SIGHASH_ALL))
    val Success(carolPsbt) = Psbt(Transaction(2, Seq(TxIn(OutPoint(carolInputTx, 0), Nil, 0)), Seq(TxOut(50000 sat, Script.pay2wpkh(carolNextPubKey))), 0))
      .updateWitnessInputTx(carolInputTx, 0, None, Some(Script.pay2pkh(carolPrivKey.publicKey)), Some(SIGHASH_ALL))

    // Carol joins the psbts, signs and finalizes her inputs.
    val Success(carolFinal) = {
      val Success(joined) = Psbt.join(alicePsbt, bobPsbt, carolPsbt)
      val outPoint = OutPoint(carolInputTx, 0)
      // Carol verifies the sighash before signing her inputs.
      assert(joined.getInput(outPoint).flatMap(_.sighashType) === Some(SIGHASH_ALL))
      joined.sign(carolPrivKey, outPoint).flatMap(signed => signed.psbt.finalizeWitnessInput(outPoint, Script.witnessPay2wpkh(carolPrivKey.publicKey, signed.sig)))
    }

    // Bob signs and finalizes his inputs.
    val Success(bobFinal) = {
      val outPoint = OutPoint(bobInputTx, 0)
      // Bob verifies the sighash before signing his inputs.
      assert(carolFinal.getInput(outPoint).flatMap(_.sighashType) === Some(SIGHASH_ALL))
      carolFinal.sign(bobPrivKey, outPoint).flatMap(signed => signed.psbt.finalizeWitnessInput(outPoint, Script.witnessPay2wpkh(bobPrivKey.publicKey, signed.sig)))
    }

    // Alice signs and extracts the final tx.
    val conjoinTx = {
      val outPoint = OutPoint(aliceInputTx, 0)
      // Alice verifies the sighash before signing her inputs.
      assert(bobFinal.getInput(outPoint).flatMap(_.sighashType) === Some(SIGHASH_ALL))
      val Success(aliceFinal) = bobFinal.sign(alicePrivKey, outPoint).flatMap(signed => signed.psbt.finalizeWitnessInput(outPoint, Script.witnessPay2wpkh(alicePrivKey.publicKey, signed.sig)))
      // Alice verifies that all inputs have been finalized.
      assert(aliceFinal.inputs.forall(_.isInstanceOf[FinalizedInput]))
      aliceFinal.extract()
    }

    assert(conjoinTx.isSuccess)
  }

  test("2-of-3 multisig workflow") {
    val alicePrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/1'")).privateKey
    val aliceNextPubKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/0'/2'")).publicKey
    val bobPrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/1'/0'")).privateKey
    val bobNextPubKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/1'/1'")).publicKey
    val carolPrivKey = DeterministicWallet.derivePrivateKey(masterPrivKey, KeyPath("m/0'/2'/1'")).privateKey
    val pubKeys = Seq(alicePrivKey, bobPrivKey, carolPrivKey).map(_.publicKey)
    val inputTx = Transaction(2, Nil, TxOut(250000 sat, Script.pay2wsh(Script.createMultiSigMofN(2, pubKeys))) :: Nil, 0)

    // Alice creates the (unsigned) PSBT and sends it to Bob and Carol.
    val spendingTx = Transaction(2, TxIn(OutPoint(inputTx, 0), Nil, 0) :: Nil, TxOut(100000 sat, Script.pay2wpkh(aliceNextPubKey)) :: TxOut(125000 sat, Script.pay2wpkh(bobNextPubKey)) :: Nil, 0)
    val Success(unsignedPsbt) = Psbt(spendingTx).updateWitnessInputTx(inputTx, 0, None, Some(Script.createMultiSigMofN(2, pubKeys)), Some(SIGHASH_ALL))

    // Each participant signs the input.
    val Success(aliceSigned) = unsignedPsbt.sign(alicePrivKey, 0).map(_.psbt)
    val Success(bobSigned) = unsignedPsbt.sign(bobPrivKey, 0).map(_.psbt)
    val Success(carolSigned) = unsignedPsbt.sign(carolPrivKey, 0).map(_.psbt)

    // Alice combines the inputs and broadcasts the final transaction.
    val finalTx_opt = {
      val Success(combined) = Psbt.combine(aliceSigned, bobSigned, carolSigned)
      // Alice verifies that all participants have signed.
      val sigs = combined.inputs.head.partialSigs.filter { case (pubKey, _) => pubKeys.contains(pubKey) }.values.toSeq
      assert(sigs.length === 3)
      combined.finalizeWitnessInput(0, Script.witnessMultiSigMofN(pubKeys, sigs.drop(1))).flatMap(_.extract())
    }

    assert(finalTx_opt.isSuccess)
  }

  private def verifyNoUnknown(psbt: Psbt): Unit = {
    assert(psbt.global.unknown.isEmpty)
    psbt.inputs.foreach(input => assert(input.unknown.isEmpty))
    psbt.outputs.foreach(output => assert(output.unknown.isEmpty))
  }

  private def verifyEmptyOutput(output: Psbt.Output): Unit = {
    assert(output.redeemScript === None)
    assert(output.witnessScript === None)
    assert(output.derivationPaths.isEmpty)
    assert(output.unknown.isEmpty)
  }

}
